import bigInt from 'big-integer';
import { Double, Num, Sign, Tensor, U } from '../runtime/defs.js';
export declare function mint(a: number): bigInt.BigInteger;
export declare function isSmall(a: bigInt.BigInteger): boolean;
export declare function setSignTo(a: bigInt.BigInteger, b: Sign): bigInt.BigInteger;
export declare function makeSignSameAs(a: bigInt.BigInteger, b: bigInt.BigInteger): bigInt.BigInteger;
export declare function makePositive(a: bigInt.BigInteger): bigInt.BigInteger;
export declare function add_numbers(p1: Num | Double, p2: Num | Double): Num | Double;
export declare function multiply_numbers(p1: Num | Double, p2: Num | Double): Num | Double;
export declare function divide_numbers(p1: Num | Double, p2: Num | Double): Num | Double;
export declare function invert_number(p1: Num | Double): Num | Double;
export declare function compare_numbers(a: Num | Double, b: Num | Double): Sign;
export declare function negate_number(p1: U): Num | Double | Tensor;
export declare function bignum_truncate(p1: Num): Num;
export declare function mp_numerator(p1: U): Num;
export declare function mp_denominator(p1: U): Num;
export declare function bignum_power_number(base: Num, expo: number): Num;
export declare function convert_rational_to_double(p: Num): number;
export declare function integer(n: number): Num;
export declare function double(d: number): Double;
export declare function rational(a: number | bigInt.BigInteger, b: number | bigInt.BigInteger): Num;
export declare function nativeInt(p1: U): number;
export declare function bignum_scan_integer(s: string): U;
export declare function bignum_scan_float(s: string): Double;
export declare function print_number(p: U, signed: boolean): string;
export declare function gcd_numbers(p1: Num, p2: Num): Num;
export declare function nativeDouble(p1: U): number;
export declare function bignum_float(n: Num): Double;
export declare function bignum_factorial(n: number): Num;
